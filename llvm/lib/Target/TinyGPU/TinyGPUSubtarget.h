//===-- TinyGPUSubtarget.h - Define Subtarget for the TinyGPU -------*- C++ -*-===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This file declares the TinyGPU specific subclass of TargetSubtargetInfo.
//
//===----------------------------------------------------------------------===//

#ifndef LLVM_LIB_TARGET_TinyGPU_TinyGPUSUBTARGET_H
#define LLVM_LIB_TARGET_TinyGPU_TinyGPUSUBTARGET_H

#include "TinyGPUFrameLowering.h"
#include "TinyGPUISelLowering.h"
#include "TinyGPUInstrInfo.h"
#include "llvm/CodeGen/SelectionDAGTargetInfo.h"
#include "llvm/CodeGen/TargetSubtargetInfo.h"
#include "llvm/IR/DataLayout.h"
#include "llvm/MC/MCInstrItineraries.h"

#define GET_SUBTARGETINFO_HEADER
#include "TinyGPUGenSubtargetInfo.inc"

namespace llvm {

// TinyGPUSubtarget class defines the subtarget-specific information for the TinyGPU target.
class TinyGPUSubtarget : public TinyGPUGenSubtargetInfo {
protected:
  // SelectionDAGTargetInfo provides information for the SelectionDAG.
  SelectionDAGTargetInfo TSInfo;

  // TinyGPUInstrInfo contains instruction-specific information.
  TinyGPUInstrInfo InstrInfo;

  // TinyGPUFrameLowering handles frame lowering for the TinyGPU target.
  TinyGPUFrameLowering FrameLowering;

  // TinyGPUTargetLowering provides target-specific lowering information.
  TinyGPUTargetLowering TLInfo;

  // TinyGPURegisterInfo contains register-specific information.
  TinyGPURegisterInfo RegInfo;

public:
  /// Constructor to initialize the subtarget with the given triple, CPU, feature string, and target machine.
  TinyGPUSubtarget(const Triple &TT, StringRef CPU, StringRef FS,
                   const TargetMachine &TM);

  /// Parses the features string and sets the subtarget options accordingly.
  /// The definition of this function is auto-generated by TableGen.
  void ParseSubtargetFeatures(StringRef CPU, StringRef TuneCPU, StringRef FS);

  /// Initializes subtarget dependencies based on the given triple, CPU, feature string, and target machine.
  TinyGPUSubtarget &initializeSubtargetDependencies(const Triple &TT,
                                                    StringRef CPU, StringRef FS,
                                                    const TargetMachine &TM);

  /// Returns the SelectionDAGTargetInfo for the TinyGPU target.
  const SelectionDAGTargetInfo *getSelectionDAGInfo() const override {
    return &TSInfo;
  }

  /// Returns the instruction information for the TinyGPU target.
  const TinyGPUInstrInfo *getInstrInfo() const override {
    return &InstrInfo;
  }

  /// Returns the frame lowering information for the TinyGPU target.
  const TargetFrameLowering *getFrameLowering() const override {
    return &FrameLowering;
  }

  /// Returns the register information for the TinyGPU target.
  const TinyGPURegisterInfo *getRegisterInfo() const override {
    return &RegInfo;
  }

  /// Returns the target lowering information for the TinyGPU target.
  const TinyGPUTargetLowering *getTargetLowering() const override {
    return &TLInfo;
  }

  /// Returns the maximum size threshold for inlining memset/memcpy calls.
  unsigned getMaxInlineSizeThreshold() const {
    return 64;
  }
};

} // namespace llvm

#endif // end LLVM_LIB_TARGET_TinyGPU_TinyGPUSUBTARGET_H
